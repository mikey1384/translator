name: Release – macOS (R2)

on:
  workflow_dispatch: # manual "Run workflow" button
  push:
    branches: [master] # build on every commit to master
    tags: ['v*'] # …and on version tags e.g. v1.2.3

concurrency:
  group: mac-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mac-build:
    runs-on: macos-14
    timeout-minutes: 60

    env:
      # ---------- Cloudflare R2 ----------
      R2_BUCKET: ai-translator-downloads
      R2_ENDPOINT: https://${{ secrets.CF_ACCOUNT_ID }}.r2.cloudflarestorage.com
      AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_SECRET }}
      AWS_DEFAULT_REGION: auto

      # ---------- Apple codesign / notarise ----------
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    steps:
      # 1) Checkout repo
      - uses: actions/checkout@v4

      # 2) Bun toolchain
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: 'latest' }

      # 3) Import Developer-ID certificate
      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}

      # 4) Restore node_modules cache (optional but speeds things up)
      - uses: actions/cache@v4
        id: bun-cache
        with:
          path: node_modules
          key: bun-modules-${{ hashFiles('bun.lockb') }}

      # 5) Install deps — postinstall hooks allowed via .bun-trust
      - name: Install dependencies
        run: bun install --frozen-lockfile

      # 6) Build + sign + notarise (Electron Builder handles notarisation)
      - name: Build & package
        run: bun run package # your package script already calls electron-builder

      # 6½) Install AWS CLI v2 (mac runner has v1 only)
      - name: Install AWS CLI v2
        run: |
          curl -sSL "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o aws.pkg
          sudo installer -pkg aws.pkg -target /
          aws --version   # sanity check

      # 7) Upload artefacts to Cloudflare R2
      - name: Upload to R2
        env:
          AWS_REQUEST_CHECKSUM_CALCULATION: when_required
          AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          TARGET="mac/${VERSION:-latest}"
          aws s3 cp dist/ "s3://${R2_BUCKET}/${TARGET}/" \
            --recursive --endpoint-url "${R2_ENDPOINT}"

      # 8) Attach DMG/ZIP to a GitHub Release (only on tag pushes)
      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref, '-') }} # treat v1.0.0-beta as prerelease
          files: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml      # optional auto-update metadata
