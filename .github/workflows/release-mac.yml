name: Release ‚Äì macOS (R2)

on:
  push:
    branches: [main]
    tags: ['v*'] # e.g. v1.0.0, v0.0.1-test
  workflow_dispatch: # manual ‚ÄúRun workflow‚Äù button

concurrency:
  group: mac-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-sign-upload:
    runs-on: macos-14 # Apple Silicon hosted runner
    timeout-minutes: 60

    # One place for all S3/R2 details
    env:
      R2_BUCKET: ai-translator-downloads
      R2_ENDPOINT: https://${{ secrets.CF_ACCOUNT_ID }}.r2.cloudflarestorage.com
      AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_SECRET }}
      AWS_DEFAULT_REGION: auto # Cloudflare‚Äôs ‚Äúpseudo-region‚Äù :contentReference[oaicite:0]{index=0}

    steps:
      - uses: actions/checkout@v4

      # ---------- Tooling ----------
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: 'latest' }

      # ---------- Import Developer-ID cert ----------
      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain: login
      # The action above unlocks the cert; no extra keychain dance needed üéâ :contentReference[oaicite:1]{index=1}

      # ---------- Build, sign & notarise ----------
      - name: Build + Notarise (bun run package)
        run: |
          bun install --frozen-lockfile
          bun run package
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # dist/ now contains *.dmg *.zip latest-mac.yml (because your `artifactName`
      # is `${productName}-${version}-${platform}-${arch}.${ext}` as per the previous fix)
      # ---------- Upload to Cloudflare R2 ----------
      - name: Upload artefacts to R2
        run: |
          VERSION="${GITHUB_REF_NAME#v}"          # strip leading ‚Äúv‚Äù if this is a tag
          TARGET_PATH="mac/${VERSION:-latest}"    # tags ‚Üí versioned folder, branch pushes ‚Üí ‚Äúlatest‚Äù

          # Copy everything
          aws s3 cp dist/ "s3://${R2_BUCKET}/${TARGET_PATH}/" \
            --recursive --endpoint-url "${R2_ENDPOINT}"

          # Optional: keep a single ‚Äúlatest‚Äù pointer for auto-updates
          aws s3 cp dist/latest-mac.yml "s3://${R2_BUCKET}/mac/latest-mac.yml" \
            --endpoint-url "${R2_ENDPOINT}"
        # This uses plain AWS CLI; it works with R2 because we set endpoint + region `auto`  :contentReference[oaicite:2]{index=2}

      # ---------- Attach to a GitHub Release ----------
      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref, '-test') }}
          files: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
