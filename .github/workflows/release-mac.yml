name: Release â€“ macOS (R2)

on:
  push:
    branches: [master]
    tags: ['v*'] # e.g. v1.0.0, v0.0.1-test
  workflow_dispatch: # manual "Run workflow" button

concurrency:
  group: mac-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-sign-upload:
    runs-on: macos-14
    timeout-minutes: 60

    # One place for all S3/R2 details
    env:
      R2_BUCKET: ai-translator-downloads
      R2_ENDPOINT: https://${{ secrets.CF_ACCOUNT_ID }}.r2.cloudflarestorage.com
      AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_SECRET }}
      AWS_DEFAULT_REGION: auto
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      # ---------- Tooling ----------
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: 'latest' }

      # ---------- Import Developer-ID cert ----------
      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}

      # ---------- Build, sign & notarise ----------
      - name: Build (skip notarize once)
        continue-on-error: true
        run: |
          bun install --frozen-lockfile

          # Tell electron-builder **not** to notarize, just sign & package
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          export ELECTRON_BUILDER_SKIP_NOTARIZE=true

          # Your package script already runs electron-builder
          bun run package

      # ---------- DEBUG NOTARIZATION (prints the real Apple error) ----------
      - name: Submit DMG to Apple manually
        run: |
          DMG_PATH=$(ls dist/Translator-*-darwin-arm64.dmg 2>/dev/null | head -n1)
          if [ -z "$DMG_PATH" ]; then
            echo "::error ::No DMG found in dist/, build step must have failed earlier."
            exit 1
          fi
          echo "Submitting $DMG_PATH to Apple notarization API..."
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id   "$TEAM_ID" \
            --wait

      # ---------- Install AWS CLI 2.22.35 ----------
      - name: Install AWS CLI 2.22.35
        run: |
          curl -sSL "https://awscli.amazonaws.com/AWSCLIV2-2.22.35.pkg" -o awscliv2.pkg
          sudo installer -pkg awscliv2.pkg -target /
          aws --version

      # ---------- Upload to Cloudflare R2 ----------
      - name: Upload artefacts to R2
        env:
          AWS_REQUEST_CHECKSUM_CALCULATION: when_required
          AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          TARGET_PATH="mac/${VERSION:-latest}"

          # push everything under mac/<tag-or-branch>/
          aws s3 cp dist/ "s3://${R2_BUCKET}/${TARGET_PATH}/" \
            --recursive --endpoint-url "${R2_ENDPOINT}"

      # ---------- Promote artefacts to mac/latest/ ----------
      - name: Promote artefacts to latest/
        run: |
          mkdir -p latest
          # pick one dmg/zip variant to be the public download
          cp dist/Translator-*-darwin-arm64.dmg  latest/Translator.dmg
          cp dist/Translator-*-darwin-arm64.zip  latest/Translator.zip
          cp dist/latest-mac.yml                 latest/
          aws s3 cp latest/ "s3://${R2_BUCKET}/mac/latest/" \
            --recursive --endpoint-url "${R2_ENDPOINT}"

      # ---------- Attach to a GitHub Release ----------
      - name: Create / Update GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref, '-test') }}
          files: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
