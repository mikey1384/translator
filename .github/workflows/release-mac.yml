name: Release – macOS (R2)

on:
  workflow_dispatch: # manual trigger
  push:
    branches: [master] # every push to mainline
    tags: ['v*'] # version tags (v1.2.3 …)

concurrency:
  group: mac-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mac-build:
    runs-on: macos-14 # Apple-silicon runner, Rosetta is available
    timeout-minutes: 60

    env:
      # ---------- Cloudflare R2 ----------
      R2_BUCKET: ai-translator-downloads
      R2_ENDPOINT: https://${{ secrets.CF_ACCOUNT_ID }}.r2.cloudflarestorage.com
      AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_SECRET }}
      AWS_DEFAULT_REGION: auto
      AWS_REQUEST_CHECKSUM_CALCULATION: when_required
      AWS_RESPONSE_CHECKSUM_VALIDATION: when_required

      # ---------- Apple codesign / notarise ----------
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # ---------- GitHub ----------
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # ---------- youtube-dl-exec ----------
      YOUTUBE_DL_SKIP_DOWNLOAD: 'true'

    steps:
      # ————————————————————————————————————————————————————————————
      - uses: actions/checkout@v4

      # ---------- Node (no Bun) ----------
      - uses: actions/setup-node@v4
        with:
          node-version: '22' # updated to avoid warnings
          cache: 'npm'

      # ---------- Apple signing cert ----------
      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}

      # ---------- Install deps & headless_shell (arm64) ----------
      - name: Install deps & headless_shell (arm64)
        run: |
          npm ci --no-audit --fund=false
          npx puppeteer@24.10.0 browsers install chrome-headless-shell \
            --platform mac_arm --path vendor/headless-arm64
          npx puppeteer@24.10.0 browsers install chrome-headless-shell \
            --platform mac     --path vendor/headless-x64

      # ---------- Rebuild native modules for both architectures ----------
      - name: Rebuild native modules for x64
        run: npm exec electron-builder install-app-deps -- --arch x64

      # ---------- Build both arm64 & x64 in one run ----------
      - name: Build both architectures
        run: npm run package:mac

      # —————————————————————————————————— upload & release ——————————————————————————
      - name: Install AWS CLI v2
        run: |
          curl -sSL "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o aws.pkg
          sudo installer -pkg aws.pkg -target /
          aws --version

      - name: Upload to R2
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          TARGET="mac/${VERSION:-latest}"
          aws s3 cp dist/ "s3://${R2_BUCKET}/${TARGET}/" \
            --recursive --exclude "*" --include "*.dmg" --include "*.zip" \
            --include "*mac.yml" --include "*.blockmap" \
            --endpoint-url "${R2_ENDPOINT}"

      - name: Promote artefacts to latest/
        if: github.ref_type == 'tag'
        run: |
          mkdir -p latest
          # Copy the critical auto-updater files
          cp dist/latest-mac.yml latest/
          cp dist/*.blockmap latest/
          # Copy DMGs with clear names
          cp dist/Translator-*-darwin-arm64.dmg latest/Translator-arm64.dmg
          cp dist/Translator-*-darwin-x64.dmg   latest/Translator-x64.dmg
          aws s3 cp latest/ "s3://${R2_BUCKET}/mac/latest/" \
            --recursive --endpoint-url "${R2_ENDPOINT}"

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          make_latest: true
          prerelease: ${{ contains(github.ref, '-') }}
